#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 128 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 73 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 14527 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/string"
0 0 24 3 1 #")"
0 0 17 3 13 #"; string-trim"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; Proyecto FLP: Ruby in Racket"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; 2018-2"
0 0 24 29 1 #"\n"
0 0 17 3 134
(
 #";; Fundamentos de Lenguajes de Programaci\303\263n // 750095M // Gru"
 #"po 01 // Profesor: Jes\303\272s Alexandrer Aranda // Monitor: Santia"
 #"go Giraldo"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Integrantes:"
0 0 24 29 1 #"\n"
0 0 17 3 50
#";; -> Juan Marcos Caicedo Mej\303\255a [C\303\263digo 1730504]"
0 0 24 29 1 #"\n"
0 0 17 3 49
#";; -> Santiago Mej\303\255a Mart\303\255nez [C\303\263digo 1731253]"
0 0 24 29 1 #"\n"
0 0 17 3 53
(
 #";; -> Juan Sebasti\303\241n D\303\255az Villota [C\303\263digo 17316"
 #"37]"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";; -> Kevin David Loaiza Giraldo [C\303\263digo 1730526]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Especificaci\303\263n L\303\251xica"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"lexical-spec"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"comment"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"#\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"identifier"
0 0 24 3 3 #" (("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"@\""
0 0 24 3 2 #") "
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 5 #" ))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #") "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Gram\303\241tica"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-spec"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"( "
0 0 17 3 37 #";;Representa un programa de ruby     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"ruby-program"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"ruby\""
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 28 #";; Parte 2: Ruby con objetos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 82
(
 #";; cambiar a: (ruby-program (\"rub"
 #"y\" (arbno class-decl) exp-batch \"end\") a-program)"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 52 #";;Exp-batch: Representa una cerradura de expresiones"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"exp-batch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")) "
0 0 14 3 7 #"a-batch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 13 #";;Expresi\303\263n:"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"simple-exp"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-simple-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 79
(
 #";Declare-exp: al menos uno o m\303\241s identificadores (deben inici"
 #"alizarse en 'nil)"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"declare\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 14 3 11 #"declare-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 52 #";Puts-exp: al menos un valor compuesto para imprimir"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"puts\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 14 3 8 #"puts-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 2 #") "
0 0 14 3 9 #"exp-batch"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"elsif\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 2 #") "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"unless\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 9 #"exp-batch"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 10 #"unless-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 2 #") "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 9 #"while-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"until\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 2 #") "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 9 #"until-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 2 #") "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"def\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"exp-batch"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 12 #"function-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"return\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 14 3 10 #"return-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 19 #";;Expresi\303\263n simple"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"simple-exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"simple-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"complement"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 13 #";;Complemento"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"complement"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 14 3 6 #"assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"complement"
0 0 24 3 2 #" ("
0 0 14 3 9 #"assign-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 14 3 10 #"assign-and"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"complement"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 14 3 10 #"comp-calls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 7 #";;Calls"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 22 #";; 0 o muchas llamadas"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"calls"
0 0 24 3 3 #" (("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 3 #")) "
0 0 14 3 10 #"some-calls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 6 #";;Call"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 9 #"arguments"
0 0 24 3 2 #") "
0 0 14 3 14 #"arguments-call"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 79
(
 #";; (call (\".\" identifier arguments) a-method-call) ;; Parte 2: Rub"
 #"y con Objetos"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 12 #";;Argumentos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 56
#";; llamar una funci\303\263n puede tener 0 argumentos o muchos"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"arguments"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 14 #"some-arguments"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 70
(
 #";; almenos 1 argumento para llamar acceder a un elemento en un arreg"
 #"lo"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 71
(
 #";; m\303\241ximo 2, ejemplo: a=[1,2,3]; a[1] #output 2; a[1,2] #outp"
 #"ut [2,3];"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 44 #";;                    a[1,2,3] #output Error"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"arguments"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #") "
0 0 14 3 13 #"arr-arguments"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 20 #";;Valores compuestos"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 14 3 7 #"a-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"un-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #") "
0 0 14 3 10 #"unop-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #") "
0 0 14 3 7 #"a-s-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"val-compl"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 9 #"compl-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 26 #";;Complemento para valores"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 23 #";; llamadas a un valor:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 71
(
 #";; Ejemplo: sirve para (\"hola\"+(mundo())) donde mundo() retorna \""
 #"mundo\""
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"val-compl"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 14 3 8 #"val-call"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 35 #";; operacion inorden con otro valor"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"val-compl"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 2 #") "
0 0 14 3 9 #"binop-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 18 #";; Valores simples"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 6 #"id-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 7 #"int-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #") "
0 0 14 3 7 #"str-val"
0 0 24 3 2 #") "
0 0 17 3 46 #";; recordar hacer string-trim cuando se evalue"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"true\""
0 0 24 3 2 #") "
0 0 14 3 8 #"true-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"false\""
0 0 24 3 2 #") "
0 0 14 3 9 #"false-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"nil\""
0 0 24 3 2 #") "
0 0 14 3 7 #"nil-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 33 #";; arreglo con 0 o muchos valores"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"simple-value"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #"("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #")"
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #") "
0 0 14 3 7 #"arr-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 19 #";;Operacion Inorden"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 3 #"add"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #") "
0 0 14 3 4 #"diff"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 4 #"mult"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 3 #"div"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 3 #"mod"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"**\""
0 0 24 3 2 #") "
0 0 14 3 3 #"pow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 5 #"great"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 8 #"great-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 4 #"less"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 7 #"less-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 5 #"equal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"!=\""
0 0 24 3 2 #") "
0 0 14 3 9 #"not-equal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 6 #"and-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"&&\""
0 0 24 3 2 #") "
0 0 14 3 6 #"and-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 5 #"or-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"||\""
0 0 24 3 2 #") "
0 0 14 3 5 #"or-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 9 #";;Rangos:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 61
#";; Solo admite 2 argumentos, no se puede operar m\303\241s de 1 vez"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 40 #";;Inclusivo: va hasta el limite superior"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"..\""
0 0 24 3 2 #") "
0 0 14 3 8 #"in-range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 55 #";;Exclusivo: va hasta un step antes del limite superior"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"...\""
0 0 24 3 2 #") "
0 0 14 3 8 #"ex-range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 33 #";; Ejemplo: (1..5) => (1 2 3 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 32 #";; Ejemplo: (1...5) => (1 2 3 4)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 34 #";; Ejemplo: ((1..5) .. 6) => Error"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"bin-op"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"step\""
0 0 24 3 2 #") "
0 0 14 3 8 #"st-range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 38 #";; Ejemplo: ((1..5) step 2) => (1 3 5)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 37 #";; Ejemplo: ((1..5) step -1) => Error"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 44 #";; Ejemplo: ((-1..-5) step -2) => (-1 -3 -5)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 37 #";; Ejemplo: ((1..-5) step 2) => Error"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 24 #";;Operaci\303\263n asignaci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"assign-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"+=\""
0 0 24 3 2 #") "
0 0 14 3 6 #"add-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"assign-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"-=\""
0 0 24 3 2 #") "
0 0 14 3 7 #"diff-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"assign-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"*=\""
0 0 24 3 2 #") "
0 0 14 3 7 #"mult-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"assign-op"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"/=\""
0 0 24 3 2 #") "
0 0 14 3 6 #"div-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"assign-op"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"**=\""
0 0 24 3 2 #") "
0 0 14 3 6 #"pow-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 21 #";;Operaci\303\263n unitaria"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"un-op"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 6 #"not-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"un-op"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"!\""
0 0 24 3 2 #") "
0 0 14 3 6 #"not-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 48 #";;##############################################"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 28 #";; Parte 2: Ruby con objetos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 32 #";(class-decl (\"class\" identifier"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 44 #";                     (arbno \"<\" identifier)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 68
(
 #";                     \"attr\" (s"
 #"eparated-list \":\" identifier \",\") \";\""
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 62
#";                     (arbno method-decl) \"end\") a-class-decl)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 71
(
 #";(method-decl (\"def\" identifier "
 #"\"(\" (separated-list identifier \",\") \")\""
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 41 #";             exp-batch                  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 35 #";             \"end\") a-method-decl)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Construidos autom\303\241ticamente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 12 #"lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 12 #"lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-spec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";El FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241"
 #"ctico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 12 #"lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"--> \""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 12 #"lexical-spec"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 12 #"grammar-spec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";Procedimientos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 8 #"procval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"closure"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-batch?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";apply-procedure: evalua el cuerpo de un procedimientos en el ambien"
 #"te extendido correspondiente"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";; eval-program: Recibe un programa de Ruby y pasa el batch a eval-e"
 #"xp-batch para que sea evaluado"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"eval-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 12 #"ruby-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 7 #"a-batch"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-batch"
0 0 24 3 2 #" ("
0 0 14 3 9 #"empty-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";; eval-exp-batch: Recibe un batch de Ruby y lo pasa a eval-expressi"
 #"ons para que eval\303\272e las expressiones"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 5 #"batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 5 #"batch"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"a-batch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";; eval-expressions: el programa "
 #"principal que recibe una expre"
 #"si\303\263n y una lista de cero o m\303\241s expresiones, lo que hac"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; es bas\303\241ndose en los casos de expression eval\303\272a y ej"
 #"ecuta lo que corresponde a cada caso"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"puts-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"eopl:printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"=>nil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"eopl:printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"'"
0 0 14 3 5 #"=>nil"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-batch1"
0 0 24 3 1 #" "
0 0 14 3 11 #"lst-c-vals1"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs1"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 11 #"lst-c-vals1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-batch1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs2"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-batch1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 11 #"lst-c-vals1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"where-is?"
0 0 24 3 2 #" ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 11 #"lst-c-vals1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"lst-exp-batchs2"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"unless-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 14 #"lst-exp-batchs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"lst-exp-batchs"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"while-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"eval-while"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"until-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"eval-until"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"declare-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 8 #"copy-aux"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 8 #"copy-aux"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 8 #"copy-aux"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 8 #"copy-aux"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"a-simple-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"simpl-exp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 15 #"eval-simple-exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"simpl-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-simple-exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"simpl-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-batch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-batch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"function-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"id-of-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 16 #"name-of-function"
0 0 24 3 1 #" "
0 0 14 3 10 #"id-of-proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 16 #"name-of-function"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 22 #"extend-env-recursively"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"id-of-proc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    ))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"return-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 15 #"value-to-return"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     ))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 15 #"value-to-return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"TO DO\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #";; Funciones auxiliares 1er nivel: son las funciones auxiliares de l"
 #"as que se sirve el eval-expressions y otras funciones"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; de este mismo nivel para poder evaluar las expresiones de manera "
 #"correcta."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";; eval-while: Su tarea es evaluar un while, si la condici\303\263n "
 #"del while es falsa, simplemente sigue ejecutando las"
) 0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";; expresiones que siguen (lo ignora). Si es verdadera, evalua la ex"
 #"p-batch dentro del while y vuelve a evaluar el while"
) 0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #";; con el nuevo ambiente creado "
 #"a partir de la primera ejecuci\303\263n del exp-batch (revisa perman"
 #"entemente la condici\303\263n"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";; del while, en el momento que se vuelva falsa, pasa a seguir con e"
 #"l resto del programa)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-while"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 11 #"eopl:printf"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"eval-while"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";; eval-until: Similar a eval-while solo que su caso base es que la "
 #"condici\303\263n que le entra sea falsa (si es verdadera"
) 0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #";; ignora el until y sigue con el programa, si es falsa, lo ejecuta "
 #"y hace un proceso similar a eval-while)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-until"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 11 #"eopl:printf"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"eval-expressions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-exp-batch"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"eval-until"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp-batch"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; eval-comp-value-arguments: Dado los casos de lista de argumentos "
 #"para funci\303\263n o lista de argumentos para"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";; acceder a array, coge la lista"
 #" de argumentos y aplica la funci\303\263n eval-multiple-comp-values "
 #"que lo que"
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";; hace es aplicar eval-comp-value (evaluar valor compuesto) a todos"
 #" los elementos de la lista"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"eval-comp-value-arguments"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"some-arguments"
0 0 24 3 2 #" ("
0 0 14 3 8 #"lst-args"
0 0 24 3 3 #") ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 8 #"lst-args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"arr-arguments"
0 0 24 3 2 #" ("
0 0 14 3 7 #"arr-arg"
0 0 24 3 1 #" "
0 0 14 3 12 #"lst-arr-args"
0 0 24 3 3 #") ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"arr-arg"
0 0 24 3 1 #" "
0 0 14 3 12 #"lst-arr-args"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";; eval-simple-exp: Evalua una simple-expression en su \303\272nico "
 #"caso; val-exp. Esta funci\303\263n le pasa el simple-value"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";; y el complemento a la funcin\303\263 eval-complement."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-simple-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"simple-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"val-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"complem"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-complement"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"complem"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #";; eval-complement: Tal vez la funci\303\263n auxiliar de 1er nivel "
 #"m\303\241s extensa de todo el proyecto, ya que maneja los 3 casos"
) 0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";; de complement: assign, assign-and y comp-calls. Todos estos 3 cas"
 #"os manejan los calls, entonces por eso es"
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #";; una funci\303\263n importante y compleja. En el primer caso de as"
 #"sign, de ser la lista de calls vac\303\255a, simplemente"
) 0 0 24 29 1 #"\n"
0 0 17 3 123
(
 #";; realiza la asignaci\303\263n tal cual se trabaja en el interpreta"
 #"dor de asignaci\303\263n al valor compuesto que tiene a la derecha."
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";; Si la lista de calls no es vac\303\255a, realiza el proceso de av"
 #"eriguar si el comp-value que estaba a la izquiera de"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; la lista de calls corresponde a un identificador que hace referen"
 #"cia a una funci\303\263n definida previamente,"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";; si es este caso, el valor a asignar ser\303\241 lo que retorne el"
 #" llamado a la funci\303\263n con los argumentos proveidos"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";; en el primer call de la lista de calls. Si se trataba de un arreg"
 #"lo, entonces busca un arreglo asociado con el"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";; identificador del comp-value y el valor que devuelva el llamado c"
 #"on el arreglo, ser\303\241 asignado. Esta din\303\241mica"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";; es similar a los procesos de assign-and que lo que hacen es tambi"
 #"\303\251n aplicar los operadores correspondientes"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";; a assign-op (+, -, *, /, **). En el caso de comp-calls revisa si "
 #"el identificador asociado al simple-value que"
) 0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #";; antecede al complemento hace referencia a alg\303\272n array o fu"
 #"nci\303\263n, y realiza la debida invocaci\303\263n al igual que en"
) 0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";; los casos anteriores. Cabe resaltar que los llamados solo funcion"
 #"an si los identificadores que le anteceden"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";; hacen referencia a funciones o arrays definidos previamente. Si n"
 #"o, lanzan error (si son numeros, booleanos, etc.)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-complement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"complem"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"complement"
0 0 24 3 1 #" "
0 0 14 3 7 #"complem"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"assign"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        )"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                  "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"assign-and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"assignn-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"assign-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignn-op"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"add-eq"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"diff-eq"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 92
(
 #"                                                                    "
 #"                       )"
) 0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"mult-eq"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 92
(
 #"                                                                    "
 #"                       )"
) 0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"div-eq"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                       [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 92
(
 #"                                                                    "
 #"                       )"
) 0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"pow-eq"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"            ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 89
(
 #"                                                                    "
 #"                    ("
) 0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                          [("
) 0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 95
(
 #"                                                                    "
 #"                          )"
) 0 0 24 29 1 #"\n"
0 0 24 3 89
(
 #"                                                                    "
 #"                    ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                        ("
) 0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                        ("
) 0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 104
(
 #"                                                                    "
 #"                                    "
) 0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"comp-calls"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calls"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          )"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; eval-calls: Dada una lista de llamados (calls), la retorna."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-calls"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-calls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-calls"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"some-calls"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lst-calls"
0 0 24 3 2 #") "
0 0 14 3 9 #"lst-calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";; eval-multiple-comp-values: Aplica map a la lista de valores entra"
 #"ntes, con la funci\303\263n de eval-comp-value."
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Es decir, evalua todos los valores compuestos de la lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";; eval-comp-value: Evalua el valor compuesto que recibe. Si se trat"
 #"a de un value, lo pasa a eval-value."
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";; Si se trata del caso unop-value, que recibe un valor compuesto y "
 #"un operador unario, el valor compuesto"
) 0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #";; que le debe estar entrando debe retornar booleano, asi que lo eva"
 #"lua (llamado recursivo) y segun el"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";; booleano que sea, lo niega (invierte)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-comp-value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"c-value"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"a-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eval-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"unop-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"un-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 6 #"])))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";; eval-value: Evalua un value. Si es un simple-value, se lo pasa a "
 #"eval-simple-value."
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; Si es un valor complementario (val-compl) lo pasa a eval-val-comp"
 #"l con el comp-value que recibe evaluado."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"a-s-val"
0 0 24 3 2 #" ("
0 0 14 3 12 #"simple-value"
0 0 24 3 3 #") ("
0 0 14 3 17 #"eval-simple-value"
0 0 24 3 1 #" "
0 0 14 3 12 #"simple-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"compl-val"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"val-compl"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-val-compl"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 9 #"val-compl"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";; eval-val-compl: Tiene el caso de val-call y de binop-val. Para el"
 #" caso de val-calls, aplica la misma evaluaci\303\263n"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";; de llamados que se vio en eval-complement. Para el caso de binop-"
 #"val, llama a eval-binop con a-val sin evaluar"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (porque debe venir ya evaluado) y con el comp-value a la derecha "
 #"evaluado."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"eval-val-compl"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-val"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-v-compl"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"val-compl"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-v-compl"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"val-call"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calls"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"long"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can't apply args to ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"long"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"pass-it"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-calls"
0 0 24 3 1 #" "
0 0 14 3 5 #"calls"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        )"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                  "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 18 #" non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 7 #")))))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"binop-val"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 14 3 6 #"bin-op"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-val"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-comp-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"comp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";; eval-simple-value: Es por decirlo as\303\255 el caso base de los "
 #"valores permitidos en el interpretador,"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; dado sobre todo en parte por la gram\303\241tica y cubre los caso"
 #"s de id, si es id busca en el ambiente"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; a que lleva referencia, si es un numero simplemente lo devuelve, "
 #"si es string lo devuelve"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";; (primero aplicando string-trim para arreglar los backslash), si e"
 #"s true-val devuelve el #t de Racket,"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";; si es false-val devuelve el #f de Racket, si es nil-val simplemen"
 #"te devuelve el char 'nil, y si"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; es arr-val aplica eval-multiple-comp-values a la lista de comp-va"
 #"lues dentro de los corchetes."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"eval-simple-value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 12 #"simple-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"id-val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"int-val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"str-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 11 #"string-trim"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"true-val"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"false-val"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"nil-val"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"arr-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 24 3 3 #") ("
0 0 14 3 25 #"eval-multiple-comp-values"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";; eval-binop: Tambi\303\251n una funci\303\263n importante del inte"
 #"rpretador, pues nos brinda las operaciones primitivas"
) 0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #";; del Ruby implementado. Posee todos los casos del bin-op y sus res"
 #"pectivos errores tanto espec\303\255ficos"
) 0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #";; como gen\303\251ricos, y un cada tipo adicionalmente tiene un err"
 #"or gen\303\251rico si no cumple con las condiciones"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
(
 #";; necesarias iniciales y no es ning\303\272n error espec\303\255fic"
 #"o."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-binop"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"bin-op"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"add"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 13 #" into String\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"String"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 11 #"add error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"diff"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 12 #"diff error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"mult"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"string-mult-aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"lst-mult-aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 12 #"mult error)\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"div"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 13 #" into String\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"String"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 11 #"div error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"mod"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 11 #"mod error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"pow"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 11 #"pow error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"great"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 13 #"great error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"great-eq"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 16 #"great-eq error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"less"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 12 #"less error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"less-eq"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 15 #"less-eq error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"equal"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 13 #"equal error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"not-equal"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 17 #"not-equal error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"and-op"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 11 #"and error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"or-op"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 10 #"or error)\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"in-range"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"inclusive-range"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 2 #" ("
0 0 19 3 16 #"in-range error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"ex-range"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"exclusive-range"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 8 #"<bin-op>"
0 0 19 3 13 #" for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"coerced"
0 0 19 3 14 #" into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"No "
0 0 19 3 8 #"implicit"
0 0 19 3 1 #" "
0 0 19 3 10 #"conversion"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Integer"
0 0 19 3 12 #" into Array\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 18 #" (ex-range error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"st-range"
0 0 24 3 5 #" () ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"step"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Not"
0 0 19 3 1 #" "
0 0 19 3 7 #"defined"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 21 #"<bin-op> for boolean\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Boolean"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 22 #" coerced into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Array"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 21 #"coerced into Integer\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 26 #"an error (st-range error)\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; Funciones auxiliares 2do nivel: son las funciones auxiliares que "
 #"seguramente son usadas por las funciones"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; auxiliares de 1er nivel, y que casi que seguramente no son ejecut"
 #"adas en el eval-expressions."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";; just-id: Dado un simple-value, en el caso de ser un id-val simple"
 #"mente devuelve el id."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"just-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 12 #"simple-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"id-val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #"("
0 0 21 3 1 #"'"
0 0 14 3 7 #"just-id"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"give"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 4 #"that"
0 0 19 3 1 #" "
0 0 19 3 9 #"isn't id\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";; search: Dado un elemento y una lista, si el elemento se encuentra"
 #" en la lista, devuelve #t, si no se encuentra,"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";; devuelve #f."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"search"
0 0 17 3 11 #";by diaz <3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";; where-is?: Dada una lista y un"
 #" elemento, si el elemento no est\303\241 en la lista, arroja error. "
 #"Si efectivamente"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; el elemento se encuentra en la lista, devuelve su posici\303\263n"
 #" (de 0 a (length lst)) de la lista."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"where-is?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"where-is?"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Element does not belong to that list\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"where-is?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";; pass-it: Trata el caso de call, dado un llamado de argumentos, le"
 #" aplica eval-comp-value-arguments"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";; a todos los argumentos del llamado."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"pass-it"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"minicall"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 1 #" "
0 0 14 3 8 #"minicall"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"arguments-call"
0 0 24 3 2 #" ("
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 25 #"eval-comp-value-arguments"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";; access-to-array: Funci\303\263n que recibe un array y una lista d"
 #"e accesos al array, si la lista de accesos"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; tiene tama\303\261o uno quiere decir que es el caso array[0] y si"
 #"mplemente devuelve el elemento del"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";; array que"
0 0 17 3 1 #" "
0 0 17 3 5 #"tiene"
0 0 17 3 1 #" "
0 0 17 3 87
(
 #"esa posici\303\263n. Si tiene tama\303\261o 2 realiza lo correspondi"
 #"ente a lo que dice el documento"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; ejemplo a = [1,2,3,4,5,6,7] entonces a[0,4] arroja '(1 2 3 4). Si"
 #" el tama\303\261o es mayor o igual a 3"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; resulta en error, y si los indices en llamado doble cualquiera es"
 #" negativo tambi\303\251n arroja error."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"access-to-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"Expected"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 21 #"2 positive arguments\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 13 #"give-me-array"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 2 #" ("
0 0 14 3 15 #"numbers-between"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"access-to-array"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 6 #"access"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 1 #" "
0 0 19 3 5 #"given"
0 0 19 3 1 #" "
0 0 19 3 1 #"3"
0 0 19 3 1 #" "
0 0 19 3 18 #"or more arguments\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; give-me-array: La funcin\303\263 que tiene la tarea de realizar e"
 #"l efecto de llamados del tipo a[m,n] en arrays"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"give-me-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"give-me-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";; numbers-between: Dado dos limites, arroja una lista de numeros en"
 #"tre esos dos limites."
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; Si la diferencia entre los dos numeros es 1, retorna una lista co"
 #"n ambos numeros. "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"numbers-between"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"minus"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; minus: Funci\303\263n auxiliar usada en numbers-between para logr"
 #"ar el efecto."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"minus"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"minus"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"num2"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; string-mult-aux: Funci\303\263n encargada de realizar multiplicac"
 #"iones de strings.    "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"string-mult-aux"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 15 #"string-mult-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; lst-mult-aux: Funci\303\263n encargada de realizar multiplicacion"
 #"es de listas."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"lst-mult-aux"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lst-mult-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #";; copy-aux: Funci\303\263n que dado un n\303\272mero y un elemento,"
 #" devuelve una lista con el elemento repetido tantas veces como sea"
) 0 0 24 29 1 #"\n"
0 0 17 3 57
(
 #";; el n\303\272mero. Fue una funci\303\263n utilizada en el taller 1"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"copy-aux"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"copy-aux"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 1 #" "
0 0 19 3 5 #"puede"
0 0 19 3 1 #" "
0 0 19 3 7 #"numeros"
0 0 19 3 1 #" "
0 0 19 3 9 #"negativos"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 4 #"solo"
0 0 19 3 1 #" "
0 0 19 3 7 #"enteros"
0 0 19 3 1 #" "
0 0 19 3 7 #"iguales"
0 0 19 3 1 #" "
0 0 19 3 1 #"o"
0 0 19 3 1 #" "
0 0 19 3 7 #"mayores"
0 0 19 3 5 #" a 0\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"copy-aux"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; ordenar: Ordena una lista de n\303\272meros de menor a mayor."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"ordenar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()] "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 8 #"insertar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 7 #"ordenar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
(
 #";; insertar: Funci\303\263n auxiliar usada en la funci\303\263n orde"
 #"nar."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"insertar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 8 #"insertar"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 9 #")))])])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; step: Funci\303\263n que llama a la funci\303\263n step-aux con e"
 #"l contador en 0."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"step-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";; step-aux: Funci\303\263n que mediante operaciones con m\303\263du"
 #"lo, y dadas una lista de n\303\272meros y el step indicado,"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";; y el contador inicializado en "
 #"0 siempre (con ayuda de la funci\303\263n step), devuelve una lista "
 #"con los n\303\272meros"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";; y el step indicado."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"step-aux"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 3 #") ("
0 0 14 3 8 #"step-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"step-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 3 #") ("
0 0 14 3 8 #"step-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"step-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"contador"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 125
(
 #";; inclusive-range: Dados dos li"
 #"mites, devuelve una lista de n\303\272meros entre los dos n\303\272m"
 #"eros, incluyendo el l\303\255mite superior."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"inclusive-range"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"ordenar"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #" ("
0 0 14 3 15 #"numbers-between"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; exclusive-range:"
0 0 17 3 1 #" "
0 0 17 3 5 #"Dados"
0 0 17 3 1 #" "
0 0 17 3 3 #"dos"
0 0 17 3 1 #" "
0 0 17 3 7 #"limites"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 8 #"devuelve"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 8 #"n\303\272meros"
0 0 17 3 1 #" "
0 0 17 3 5 #"entre"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 1 #" "
0 0 17 3 3 #"dos"
0 0 17 3 14 #" n\303\272meros, sin"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; incluir el"
0 0 17 3 1 #" "
0 0 17 3 17 #"l\303\255mite superior."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"exclusive-range"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"numbers-between"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";Referencias"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-setref!"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"primitive-setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";Ambientes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 2 #"  "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 10 #")))       "
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";extend-env: <list-of symbols> <list-of numbers> enviroment -> envir"
 #"oment"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";funci\303\263n que crea un ambiente extendido"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #";extend-env-recursively: <list-of symbols> <list-of <list-of symbols"
 #">> <list-of expressions> environment -> environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";funci\303\263n que crea un ambiente extendido para procedimientos r"
 #"ecursivos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"extend-env-recursively"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"vec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"iota"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          13 21           0 0           0 1 0 26 3 46
#"|Ambiente recursivo para un solo procedimiento"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"a-recursive-env"
0 0 24 3 1 #" "
0 0 14 3 11 #"a-proc-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"vec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"a-proc-name"
0 0 24 3 2 #") "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";iota: number -> list"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";funci\303\263n que retorna una lista de los n\303\272meros desde 0 "
 #"hasta end"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"iota"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46
#";funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"deref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-env-ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"Error"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"undefined local variable or method ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";Ambiente inicial"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 24 3 3 #") ("
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";Funciones Auxiliares"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; en la lista de s\303\255mbolos de un ambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"interpretador"
0 0 24 3 1 #")"
0           0
