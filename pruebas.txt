;; Proyecto FLP: Ruby in Racket
;; 2018-2
;; Fundamentos de Lenguajes de Programación // 750095M // Grupo 01 // Profesor: Jesús Alexandrer Aranda // Monitor: Santiago Giraldo
;; Integrantes:
;; -> Juan Marcos Caicedo Mejía [Código 1730504]
;; -> Santiago Mejía Martínez [Código 1731253]
;; -> Juan Sebastián Díaz Villota [Código 1731637]
;; -> Kevin David Loaiza Giraldo [Código 1730526]


-- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ;
---> Pruebas para Interpretador: Ruby sin Objetos
-- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ; -- ;

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.1 Operaciones
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby puts ((1 + 8) + (9 + 7)); end
ruby puts ((8 - 1) - (9 - 7)); end
ruby puts ((8 * 1) * (9 * 7)); end
ruby puts ((8 / 2) / (6 / 3)); end
ruby puts ((5 % 3) % (8 % 3)); end
ruby puts ((2 ** 1) ** (2 ** 2)); end
ruby puts (2 > 1); end
ruby puts (2 >= 1); end
ruby puts (2 < 1); end
ruby puts (2 <= 1); end
ruby puts (1 == 1); end
ruby puts (1 != 1); end
ruby puts (true and false); end
ruby puts (true or false); end
ruby puts (1..6); end
ruby puts (1...6); end
ruby puts ((1..10) step 2); end
ruby puts (("hey" + " que tal") + " mi nombre es Paco"); end
ruby puts ((["hey"] + [" que tal"]) + [" mi nombre es Paco"]); end
ruby puts ("lambda"*5); end
ruby puts ([1,2,3,4]*3); end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.2 Expresión: declare-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby declare x,y,z; x = 17; y = 29; z = 34; puts x,y,z; end
ruby declare x,y,z; x = 17; y = 29; puts x,y,z; end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.3 Expresión simple
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby declare x; x = 19; puts x; x += 1; puts x; end
ruby declare y; declare array; array = [4,5,6]; y = 0; puts y; y -= array[2]; puts y; end
ruby declare z; def alapotenciadedos(val) val **= 2; return val; end z = alapotenciadedos(4); puts z; end
ruby def hola(nombre) puts ("hola " + nombre); end hola("Santiago"); end
ruby def mult10(numb) numb *= 10; return numb; end mult10(20); end
ruby declare array; array = [[[1,2,3],4,5,6],7,8,9]; puts (array[0][0][0]), (array[0][3]), (array[2]), (array[1,3]); end
ruby declare array2; array2 = [[[[[[[[1]]]]]]],2]; puts (array2[0][0][0][0][0][0][0][0]), (array2[1]); end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.4 Expresión: function-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby def suma(val1, val2) declare result; result = (val1 + val2); return result; end suma(398,2); end
ruby def multi(val1,val2) declare result; result = (val1 * val2); return result; end puts (multi(7,3)); end
ruby def factorial(numero) if (numero == 0) then return 1; elsif (numero == 1) then return 1; else return (numero * (factorial ((numero - 1)))); end end puts "el factorial de 5 es ", (factorial(5)); end
ruby def unomayor(num) declare arreglo; arreglo = [1,2,3,4,5,6,7,8,9,10]; return (arreglo[num]); end unomayor(6); end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.5 Expresión: if-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby declare x; x = 1; if (x == 0) then puts "hola"; end puts "hey"; end
ruby declare x; x = 0; if (x == 0) then puts "Es el cero"; elsif (x == 1) then puts "Es el uno"; else puts "No se quien es"; end end
ruby declare x; x = 1; if (x == 0) then puts "Es el cero"; elsif (x == 1) then puts "Es el uno"; else puts "No se quien es"; end end
ruby declare x; x = 53; if (x == 0) then puts "Es el cero"; elsif (x == 1) then puts "Es el uno"; else puts "No se quien es"; end end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.6 Expresión: unless-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby unless (true and false) then puts (2 ** 8); end end
ruby unless (true and true) then puts (2 ** 8); else puts (2 ** 7); end end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.7 Expresión: while-exp y until-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby declare a; a = 0; while (a < 20) do puts a; a += 1; end end
ruby declare b; b = 0; while (b <= 20) do puts b; b += 2; end end
ruby declare c; c = 0; until (c > 30) do puts c; c += 3; end end
ruby declare d; d = 0; until (d >= 30) do puts d; d += 4; end end

-- ; -- ; -- ; -- ; -- ; -- ; -- ;
2.3.8 Expresión: for-exp
-- ; -- ; -- ; -- ; -- ; -- ; -- ;

ruby for x in (1..7) do puts x; end end
ruby for x in (1...7) do puts x; end end
ruby for x in ((1..12) step 2) do puts x; end end
ruby for y in [6,7,8,9] do puts y; end end
ruby declare arraysito; arraysito = [10,11,12,13,14,15,16,17]; for z in arraysito do puts z; end end

